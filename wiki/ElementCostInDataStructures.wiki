#summary This is the cost per element in major data structures offered by Java and Guava. It is generated by
#labels Featured
[http://goo.gl/L3wJ ElementCostOfDataStructures.java].

= Introduction =

Ever wondered what's the cost of adding an entry to a HashMap? Or a new element in a TreeSet? No more head-scratching, you can consult the following list and know very precisely the cost per elements in your data structures (using their default settings when not specified).

= Cost per element in various well-known Java/Guava data structures =
(*Note*: this test ran on a 64bit machine, so byte measurements should be roughly half on a 32bit.)
{{{
                               ArrayList -- Bytes =   9.88, Objects =  0.00 Refs =  1.24 Primitives = {}
                              LinkedList -- Bytes =  40.00, Objects =  1.00 Refs =  3.00 Primitives = {}
                              ArrayDeque -- Bytes =   8.25, Objects =  0.00 Refs =  1.03 Primitives = {}
                                 HashSet -- Bytes =  64.51, Objects =  1.00 Refs =  5.06 Primitives = {int=1.0}
                           LinkedHashSet -- Bytes =  80.51, Objects =  1.00 Refs =  7.06 Primitives = {int=1.0}
                           PriorityQueue -- Bytes =  11.15, Objects =  0.00 Refs =  1.39 Primitives = {}
                   PriorityBlockingQueue -- Bytes =  11.15, Objects =  0.00 Refs =  1.39 Primitives = {}
                                 TreeSet -- Bytes =  64.00, Objects =  1.00 Refs =  5.00 Primitives = {boolean=1.0}
                   ConcurrentSkipListSet -- Bytes =  59.85, Objects =  1.50 Refs =  4.49 Primitives = {int=3.780241935483871E-4}
                    CopyOnWriteArrayList -- Bytes =   8.00, Objects =  0.00 Refs =  1.00 Primitives = {}
                     CopyOnWriteArraySet -- Bytes =   8.00, Objects =  0.00 Refs =  1.00 Primitives = {}
                              DelayQueue -- Bytes =  11.15, Objects =  0.00 Refs =  1.39 Primitives = {}
                     LinkedBlockingQueue -- Bytes =  32.00, Objects =  1.00 Refs =  2.00 Primitives = {}
                     LinkedBlockingDeque -- Bytes =  40.00, Objects =  1.00 Refs =  3.00 Primitives = {}
                                 HashMap -- Bytes =  64.51, Objects =  1.00 Refs =  5.06 Primitives = {int=1.0}
                           LinkedHashMap -- Bytes =  80.51, Objects =  1.00 Refs =  7.06 Primitives = {int=1.0}
                                 TreeMap -- Bytes =  64.00, Objects =  1.00 Refs =  5.00 Primitives = {boolean=1.0}
                             WeakHashMap -- Bytes =  88.51, Objects =  1.00 Refs =  8.06 Primitives = {int=1.0}
                       ConcurrentHashMap -- Bytes =  64.51, Objects =  1.00 Refs =  5.06 Primitives = {int=1.0}
                                MapMaker -- Bytes =  64.51, Objects =  1.00 Refs =  5.06 Primitives = {int=1.0}
                        MapMaker_Expires -- Bytes = 120.51, Objects =  2.00 Refs =  9.06 Primitives = {int=1.0, long=1.0}
                         MapMaker_Evicts -- Bytes = 112.51, Objects =  2.00 Refs =  9.06 Primitives = {int=1.0}
                        MapMaker_Expires -- Bytes = 120.51, Objects =  2.00 Refs =  9.06 Primitives = {int=1.0, long=1.0}
                        MapMaker_Expires -- Bytes = 120.51, Objects =  2.00 Refs =  9.06 Primitives = {int=1.0, long=1.0}
                        MapMaker_Expires -- Bytes = 120.51, Objects =  2.00 Refs =  9.06 Primitives = {int=1.0, long=1.0}
                  MapMaker_ExpiresEvicts -- Bytes = 136.51, Objects =  2.00 Refs = 11.06 Primitives = {int=1.0, long=1.0}
                       MapMaker_SoftKeys -- Bytes = 128.51, Objects =  2.00 Refs = 10.06 Primitives = {int=1.0, long=1.0}
                     MapMaker_SoftValues -- Bytes = 136.51, Objects =  2.00 Refs = 11.06 Primitives = {int=1.0, long=1.0}
                 MapMaker_SoftKeysValues -- Bytes = 168.51, Objects =  2.00 Refs = 14.06 Primitives = {int=1.0, long=2.0}
                MapMaker_Evicts_SoftKeys -- Bytes = 144.51, Objects =  2.00 Refs = 12.06 Primitives = {int=1.0, long=1.0}
              MapMaker_Evicts_SoftValues -- Bytes = 152.51, Objects =  2.00 Refs = 13.06 Primitives = {int=1.0, long=1.0}
          MapMaker_Evicts_SoftKeysValues -- Bytes = 184.51, Objects =  2.00 Refs = 16.06 Primitives = {int=1.0, long=2.0}
               MapMaker_Expires_SoftKeys -- Bytes = 152.51, Objects =  2.00 Refs = 12.06 Primitives = {int=1.0, long=2.0}
             MapMaker_Expires_SoftValues -- Bytes = 160.51, Objects =  2.00 Refs = 13.06 Primitives = {int=1.0, long=2.0}
         MapMaker_Expires_SoftKeysValues -- Bytes = 192.51, Objects =  2.00 Refs = 16.06 Primitives = {int=1.0, long=3.0}
         MapMaker_ExpiresEvicts_SoftKeys -- Bytes = 168.51, Objects =  2.00 Refs = 14.06 Primitives = {int=1.0, long=2.0}
       MapMaker_ExpiresEvicts_SoftValues -- Bytes = 176.51, Objects =  2.00 Refs = 15.06 Primitives = {int=1.0, long=2.0}
   MapMaker_ExpiresEvicts_SoftKeysValues -- Bytes = 208.51, Objects =  2.00 Refs = 18.06 Primitives = {int=1.0, long=3.0}
              HashMultiset (frequency=1) -- Bytes =  88.51, Objects =  2.00 Refs =  5.06 Primitives = {int=2.0}
              TreeMultiset (frequency=1) -- Bytes =  88.00, Objects =  2.00 Refs =  5.00 Primitives = {int=1.0, boolean=1.0}
                               HashBiMap -- Bytes = 129.02, Objects =  2.00 Refs = 10.13 Primitives = {int=2.0}
                    HashMultimap (Worst) -- Bytes = 352.51, Objects =  5.00 Refs = 29.06 Primitives = {int=5.0, float=1.0}
                     HashMultimap (Best) -- Bytes =  64.51, Objects =  1.00 Refs =  5.06 Primitives = {int=1.0}
               ArrayListMultimap (Worst) -- Bytes = 208.51, Objects =  3.00 Refs = 16.06 Primitives = {int=3.0}
                ArrayListMultimap (Best) -- Bytes =   9.88, Objects =  0.00 Refs =  1.24 Primitives = {}
                    TreeMultimap (Worst) -- Bytes = 232.00, Objects =  4.00 Refs = 18.00 Primitives = {int=2.0, boolean=2.0}
                     TreeMultimap (Best) -- Bytes =  64.00, Objects =  1.00 Refs =  5.00 Primitives = {boolean=1.0}
}}}

Some clarifications:
{{{HashMultimap (Worst)}}} means that every key only maps to a single value. The huge memory cost you see is because by default a big hashtable is allocated per key - [http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/HashMultimap.html#create(int,%20int) you can fine-tune this size though]. Conversely, the "best" case is where a _single_ key maps to all values - there, the per-entry cost degenerates to the per-entry cost of a regular HashMap, for obvious reasons. The per-entry cost of a realistic HashMultimap will be somewhere (depending on the distribution of values in keys) between these two limits.

Another curious observation: ArrayDeque does not resize at exactly the same thresholds as ArrayList does, so I had some tuning to do. The previous results were unlucky enough to show that an ArrayDeque had around _double_ the cost of an ArrayList, because the former resized but the latter did not, for the same amount of entries.